### Summary of "How a Microcontroller Starts" Video Lecture -->https://www.youtube.com/watch?v=MhOba73z-dQ

- **Program Start:** The program does not start at `main`; it begins at a fixed memory location defined by the microcontroller's reset vector.

- **Hardware Initialization:** Before executing code, hardware stabilizes voltages, clocks, and resets registers.

- **ARM Cortex-M Specifics:** The CPU automatically loads the stack pointer and program counter from the interrupt vector table at startup.

- **Startup Code:** Usually written in assembly, it sets up the environment before `main` runs.

- **C Runtime Initialization:** Key steps include:

  - Copying initialized global/static variables from flash to RAM (data section).

  - Zeroing uninitialized global/static variables (BSS section).

  - Calling system initialization functions (e.g., clock setup).

  - Calling constructor functions (mainly for C++).

- **Linker Script:** Defines memory layout and placement of code/data sections.

- **Custom Startup Code:** Can be written in C, but must carefully handle initialization without relying on the runtime environment.

- **Debugging Startup:** Using a debugger to step through startup code helps understand the process.

- **Practical Notes:** Most developers don’t modify startup code but understanding it helps diagnose early boot issues or customize boot behavior.

This video uses an STM32 microcontroller (ARM Cortex-M) as an example and shows how to create and debug startup code from scratch using GCC toolchain, emphasizing the importance of proper initialization for a functional C environment on bare-metal microcontrollers.


/***************************************************************************************************************************************************/
Date - 02june25
/***************************************************************************************************************************************************/

## Microcontroller Startup Overview

- The program does not truly start at the `main` function; instead, generic startup steps occur first to prepare the system, common to most microcontrollers despite hardware and toolchain differences   .
- Example studied: STM32 microcontroller based on ARM Cortex-M processor, using STM32Cube IDE for project creation and debugging to explore startup code before `main`   .
- Debugging configuration is adjusted to break at the first CPU instruction rather than `main`, revealing the startup code often written in assembly to perform low-level initialization before the C runtime is set up    .
- Hardware initialization prior to code execution includes voltage stabilization, clock synchronization, peripheral resets, etc., which are outside user control  .

## Hardware Initialization Details

- ARM Cortex-M processors automatically load the program counter (PC) and stack pointer (SP) from the first two entries of the interrupt vector table at a fixed memory location (reset vector) on startup   .
- The interrupt vector table is placed at the start of flash memory, specified by the linker script   .
- ARM’s automatic stack pointer loading is a convenience not common to all architectures, where manual initialization might be required  .

## Startup Code Execution Flow

- Startup code sets up the stack pointer (though ARM hardware does this automatically), checks boot source, and prepares for C runtime initialization   .
- C runtime initialization involves:
  - Copying initialized global/static variables from flash to RAM (data section) because RAM initially contains undefined values   .
  - Zero-initializing uninitialized global/static variables (BSS section)  .
  - Calling `SystemInit()` for low-level hardware setup like clock configuration (empty in example but typically used)  .
  - Calling `libc_init_array()` to invoke constructor functions, mainly relevant for C++ but supported by some C compilers as an extension  .
- After these steps, the program jumps to `main` and enters normal execution, typically never returning in embedded systems (infinite loop provided as a safety catch)  .

## Writing Custom Startup Code

- Using ARM GNU toolchain directly allows more control by avoiding the hidden startup code in vendor IDEs like STM32Cube  .
- Minimal C startup file (`start.c`) defines:
  - `Reset_Handler` function (entry point called on reset).
  - Interrupt vector table as an array of function pointers with stack pointer address first, `Reset_Handler` second, followed by other interrupt handlers (e.g., HardFault)    .
- Vector table is placed at the start of flash using a linker script specifying memory layout and sections (flash and RAM start addresses and sizes)    .
- Stack pointer symbol defined at the end of RAM, stack grows downward  .

## Linker Script and Linking Considerations

- Default GCC linker scripts and startup files are designed for hosted environments with OS loaders; for bare-metal microcontrollers, custom linker scripts and no standard libraries/startup files are used to avoid unwanted code linking     .
- Flags like `-nostartfiles`, `-nostdlib`, and an empty linker script ensure a clean slate for manual startup code    .
- Linking with no standard libraries results in smaller executables but requires manual implementation of system calls if needed later   .

## C Runtime Initialization in Custom Startup

- Without proper initialization, global/static variables are placed in flash and not writable, causing hard faults when code attempts to modify them    .
- Linker script must place `.data` and `.bss` sections in RAM:
  - `.data` must be copied from flash to RAM at startup.
  - `.bss` must be zero-initialized in RAM    .
- Startup code must explicitly perform these initializations by copying `.data` and clearing `.bss` before calling `main`    .

## Enhancing the Runtime Environment

- Standard C library (e.g., newlib) can be linked back in to provide functions like `memcpy`, but requires providing stubs for system calls or linking with minimal specs for embedded systems   .
- Calling `libc_init_array()` supports constructor functions, important for C++ or external libraries that rely on them     .
- Additional hardware initialization (e.g., clock setup) can be added via a `SystemInit()` function called during startup  .
- More complex runtime setups can use full C runtime start files from libraries like newlib, enabling features like semihosting and profiling, but require more linker script configuration and caution   .

## Key Insights and Practical Advice

> "The goal of the startup code is to take the microcontroller from a reset state with few guarantees about initial conditions to a functional C environment with everything initialized as expected."  
> Understanding startup code helps diagnose crashes before `main` and perform early boot tasks, though most development abstracts this away    .

- Startup code depends on hardware, toolchain, software, and programming language; C requires more setup than pure assembly, while C++ requires even more due to constructors/destructors  .
- Modifying startup code requires care as mistakes can cause hard faults or prevent the program from running properly  .

---

This summary outlines the essential flow and components of microcontroller startup, focusing on ARM Cortex-M devices, custom startup code writing, linker script configuration, and runtime initialization critical for proper embedded C program execution.